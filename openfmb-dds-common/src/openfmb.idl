/*
 *  IDL file generated by RTI Connext DDS Enterprise Architect IDL 4 Add-in version 1.0
 *      Enterprise Architect File:  C:\Xtensible\OpenFMB\IDLs\Phase 2\Model\OpenFMB for IDL generation-2016-10-21 (10-31 again after v1.10, 11-04 after v1.11 & issue49).eap
 *      Date: 11/4/2016 1:45:35 PM
 */
 
/* ******************************************************************* */
/* These are UML builtin primitive types that are not primitive in IDL */
module UML_Extension {
    typedef long long dateTime;
};

/* ******************************************************************* */
/* These are Types defined in the model */

/* -----  Model: "Model"  ----- */
module OpenFMB_Information_Model {
    module openfmb {
        module breakermodule {
            struct BreakerEventProfile;
            struct BreakerReadingProfile;
            struct BreakerStatusProfile;
        }; /* module breakermodule */

        module commonmodule {
            struct ActivePower;
            struct Analog;
            struct AnalogMeasurementList;
            struct AnalogValue;
            struct BasicIntervalSchedule;
            struct BooleanMeasurement;
            struct BooleanMeasurementList;
            struct BooleanMeasurementValue;
            struct Breaker;
            struct BreakerEvent;
            struct BreakerReading;
            struct BreakerReadingList;
            struct BreakerStatus;
            struct Container;
            struct Curve;
            struct CurveData;
            struct CurveDataList;
            struct DateTimeInterval;
            struct Discrete;
            struct DiscreteMeasurementList;
            struct DiscreteValue;
            struct EnergyConsumer;
            struct ESS;
            struct ESSControl;
            struct ESSControlSchedule;
            struct ESSControlScheduleList;
            struct ESSEvent;
            struct ESSReading;
            struct ESSReadingList;
            struct ESSStatus;
            struct Event;
            struct ForecastSchedule;
            struct GeneratingUnit;
            struct GenerationControl;
            struct GenerationControlSchedule;
            struct GenerationControlScheduleList;
            struct GenerationEvent;
            struct GenerationReading;
            struct GenerationReadingList;
            struct GenerationStatus;
            typedef octet HexBinary16[2];
            struct Humidity;
            struct HumidityData;
            struct HumidityDataList;
            struct IdentifiedObject;
            struct InterchangeSchedule;
            struct InterchangeScheduleList;
            struct InterconnectionPoint;
            struct InterconnectionSchedule;
            struct InterconnectionScheduleList;
            struct IrregularTimePoint;
            struct IrregularTimePointList;
            struct LoadControl;
            struct LoadControlSchedule;
            struct LoadControlScheduleList;
            struct LoadReading;
            struct LoadReadingList;
            struct LoadStatus;
            struct Market;
            struct MarketFactorList;
            struct MarketFactors;
            struct MarketRun;
            struct MarketRunList;
            struct Meter;
            struct MotorOperatedSwitch;
            struct MotorOperatedSwitchControl;
            struct MotorOperatedSwitchControlSchedule;
            struct MotorOperatedSwitchControlScheduleList;
            struct MotorOperatedSwitchEvent;
            struct MotorOperatedSwitchReading;
            struct MotorOperatedSwitchReadingList;
            struct MotorOperatedSwitchStatus;
            struct OptimizedMicroGridMarket;
            struct PowerSystemResource;
            struct Reading;
            struct Recloser;
            struct RecloserControl;
            struct RecloserEvent;
            struct RecloserReading;
            struct RecloserReadingList;
            struct RecloserStatus;
            struct RegulatorControlSchedule;
            struct RegulatorControlScheduleList;
            struct RegulatorEvent;
            struct RegulatorReading;
            struct RegulatorReadingList;
            struct RegulatorStatus;
            struct RegulatorSystem;
            struct ResourceReading;
            struct ResourceReadingList;
            struct ResourceStatus;
            struct SecurityEvent;
            struct SetPoint;
            struct SetPointList;
            struct ShuntControl;
            struct ShuntControlSchedule;
            struct ShuntControlScheduleList;
            struct ShuntReading;
            struct ShuntReadingList;
            struct ShuntStatus;
            struct ShuntSystem;
            struct SolarCapability;
            struct SolarControl;
            struct SolarControlSchedule;
            struct SolarControlScheduleList;
            struct SolarInverter;
            struct SolarInverterEvent;
            struct SolarReading;
            struct SolarReadingList;
            struct SolarStatus;
            struct Status;
            struct StringMeasurement;
            struct StringMeasurementList;
            struct StringMeasurementValue;
            struct SunRadiation;
            struct SunRadiationData;
            struct SunRadiationDataList;
            struct Temperature;
            struct TemperatureData;
            struct TemperatureDataList;
            typedef string uuidType;
            struct WeatherData;
            struct Wind;
            struct WindData;
            struct WindDataList;
            enum BreakerReadingTypeKind {
                BreakerReadingTypeKind_Hz = 2,
                BreakerReadingTypeKind_Ia = 3,
                BreakerReadingTypeKind_Ib = 4,
                BreakerReadingTypeKind_Ic = 5,
                BreakerReadingTypeKind_Amp = 6,
                BreakerReadingTypeKind_kVAa = 7,
                BreakerReadingTypeKind_kVAb = 8,
                BreakerReadingTypeKind_kVAc = 9,
                BreakerReadingTypeKind_kVA = 10,
                BreakerReadingTypeKind_kWa = 11,
                BreakerReadingTypeKind_kWb = 12,
                BreakerReadingTypeKind_kWc = 13,
                BreakerReadingTypeKind_kW = 14,
                BreakerReadingTypeKind_Va = 15,
                BreakerReadingTypeKind_none = 0,
                BreakerReadingTypeKind_Vb = 16,
                BreakerReadingTypeKind_Vc = 17,
                BreakerReadingTypeKind_Vab = 18,
                BreakerReadingTypeKind_Vbc = 19,
                BreakerReadingTypeKind_Vca = 20,
                BreakerReadingTypeKind_PAa = 21,
                BreakerReadingTypeKind_PAb = 22,
                BreakerReadingTypeKind_PAc = 23,
                BreakerReadingTypeKind_kVARa = 24,
                BreakerReadingTypeKind_kVARb = 25,
                BreakerReadingTypeKind_kVARc = 26,
                BreakerReadingTypeKind_kVAR = 27,
                BreakerReadingTypeKind_other = 1
            };
            enum CurveNameKind {
                CurveNameKind_other = 1,
                CurveNameKind_realPower = 2,
                CurveNameKind_none = 0,
                CurveNameKind_reactivePower = 3,
                CurveNameKind_frequency = 4,
                CurveNameKind_voltage = 5,
                CurveNameKind_rampRate = 6,
                CurveNameKind_peakShavingLimit = 7,
                CurveNameKind_baseLoadingLimit = 8,
                CurveNameKind_efficiency = 9,
                CurveNameKind_curtailment = 10
            };
            enum CurveStyleKind {
                CurveStyleKind_constantYValue = 2,
                CurveStyleKind_straightLineYValues = 3,
                CurveStyleKind_none = 0,
                CurveStyleKind_other = 1
            };
            enum EnergyProductKind {
                EnergyProductKind_firm = 2,
                EnergyProductKind_nfrm = 3,
                EnergyProductKind_dyn = 5,
                EnergyProductKind_whl = 4,
                EnergyProductKind_none = 0,
                EnergyProductKind_other = 1
            };
            enum ESSControlKind {
                ESSControlKind_powerRequest = 8,
                ESSControlKind_island = 2,
                ESSControlKind_resynchronization = 3,
                ESSControlKind_maintainSOC = 4,
                ESSControlKind_standby = 5,
                ESSControlKind_firm = 6,
                ESSControlKind_none = 0,
                ESSControlKind_loadFollowing = 7,
                ESSControlKind_other = 1
            };
            enum ESSEventKind {
                ESSEventKind_charging = 4,
                ESSEventKind_discharging = 2,
                ESSEventKind_none = 0,
                ESSEventKind_idle = 3,
                ESSEventKind_other = 1
            };
            enum ESSReadingTypeKind {
                ESSReadingTypeKind_Hz = 2,
                ESSReadingTypeKind_Ia = 3,
                ESSReadingTypeKind_Ib = 4,
                ESSReadingTypeKind_Ic = 5,
                ESSReadingTypeKind_Amp = 6,
                ESSReadingTypeKind_kVAa = 7,
                ESSReadingTypeKind_kVAb = 8,
                ESSReadingTypeKind_kVAc = 9,
                ESSReadingTypeKind_kVA = 10,
                ESSReadingTypeKind_kWa = 11,
                ESSReadingTypeKind_kWb = 12,
                ESSReadingTypeKind_kWc = 13,
                ESSReadingTypeKind_kW = 14,
                ESSReadingTypeKind_Va = 15,
                ESSReadingTypeKind_none = 0,
                ESSReadingTypeKind_Vb = 16,
                ESSReadingTypeKind_Vc = 17,
                ESSReadingTypeKind_Vab = 18,
                ESSReadingTypeKind_Vbc = 19,
                ESSReadingTypeKind_Vca = 20,
                ESSReadingTypeKind_PAa = 21,
                ESSReadingTypeKind_PAb = 22,
                ESSReadingTypeKind_PAc = 23,
                ESSReadingTypeKind_kVARa = 24,
                ESSReadingTypeKind_kVARb = 25,
                ESSReadingTypeKind_kVARc = 26,
                ESSReadingTypeKind_kVAR = 27,
                ESSReadingTypeKind_other = 1
            };
            enum ExecutionKind {
                ExecutionKind_da = 5,
                ExecutionKind_hasp = 2,
                ExecutionKind_rtpd = 4,
                ExecutionKind_rtd = 3,
                ExecutionKind_none = 0,
                ExecutionKind_other = 1
            };
            enum GenerationControlKind {
                GenerationControlKind_start = 4,
                GenerationControlKind_stop = 2,
                GenerationControlKind_none = 0,
                GenerationControlKind_isochronousEnabled = 3,
                GenerationControlKind_other = 1
            };
            enum GenerationEventKind {
                GenerationEventKind_generating = 6,
                GenerationEventKind_notGenerating = 2,
                GenerationEventKind_none = 0,
                GenerationEventKind_isochronousEnabled = 3,
                GenerationEventKind_alarmButGenerating = 4,
                GenerationEventKind_alarmNotGenerating = 5,
                GenerationEventKind_other = 1
            };
            enum GenerationReadingTypeKind {
                GenerationReadingTypeKind_Hz = 2,
                GenerationReadingTypeKind_Ia = 3,
                GenerationReadingTypeKind_Ib = 4,
                GenerationReadingTypeKind_Ic = 5,
                GenerationReadingTypeKind_Amp = 6,
                GenerationReadingTypeKind_kVAa = 7,
                GenerationReadingTypeKind_kVAb = 8,
                GenerationReadingTypeKind_kVAc = 9,
                GenerationReadingTypeKind_kVA = 10,
                GenerationReadingTypeKind_kWa = 11,
                GenerationReadingTypeKind_kWb = 12,
                GenerationReadingTypeKind_kWc = 13,
                GenerationReadingTypeKind_kW = 14,
                GenerationReadingTypeKind_Va = 15,
                GenerationReadingTypeKind_none = 0,
                GenerationReadingTypeKind_Vb = 16,
                GenerationReadingTypeKind_Vc = 17,
                GenerationReadingTypeKind_Vab = 18,
                GenerationReadingTypeKind_Vbc = 19,
                GenerationReadingTypeKind_Vca = 20,
                GenerationReadingTypeKind_PAa = 21,
                GenerationReadingTypeKind_PAb = 22,
                GenerationReadingTypeKind_PAc = 23,
                GenerationReadingTypeKind_kVARa = 24,
                GenerationReadingTypeKind_kVARb = 25,
                GenerationReadingTypeKind_kVARc = 26,
                GenerationReadingTypeKind_kVAR = 27,
                GenerationReadingTypeKind_other = 1
            };
            enum InterTieDirectionKind {
                InterTieDirectionKind_e = 4,
                InterTieDirectionKind_i = 2,
                InterTieDirectionKind_netzero = 3,
                InterTieDirectionKind_none = 0,
                InterTieDirectionKind_other = 1
            };
            enum InverterModeKind {
                InverterModeKind_csi = 5,
                InverterModeKind_vsiPQ = 2,
                InverterModeKind_none = 0,
                InverterModeKind_vsiVF = 3,
                InverterModeKind_vsiISO = 4,
                InverterModeKind_other = 1
            };
            enum LoadControlKind {
                LoadControlKind_start = 3,
                LoadControlKind_stop = 2,
                LoadControlKind_none = 0,
                LoadControlKind_other = 1
            };
            enum LoadReadingTypeKind {
                LoadReadingTypeKind_Hz = 2,
                LoadReadingTypeKind_Ia = 3,
                LoadReadingTypeKind_Ib = 4,
                LoadReadingTypeKind_Ic = 5,
                LoadReadingTypeKind_Amp = 6,
                LoadReadingTypeKind_kVAa = 7,
                LoadReadingTypeKind_kVAb = 8,
                LoadReadingTypeKind_kVAc = 9,
                LoadReadingTypeKind_kVA = 10,
                LoadReadingTypeKind_kWa = 11,
                LoadReadingTypeKind_kWb = 12,
                LoadReadingTypeKind_kWc = 13,
                LoadReadingTypeKind_kW = 14,
                LoadReadingTypeKind_Va = 15,
                LoadReadingTypeKind_none = 0,
                LoadReadingTypeKind_Vb = 16,
                LoadReadingTypeKind_Vc = 17,
                LoadReadingTypeKind_Vab = 18,
                LoadReadingTypeKind_Vbc = 19,
                LoadReadingTypeKind_Vca = 20,
                LoadReadingTypeKind_PAa = 21,
                LoadReadingTypeKind_PAb = 22,
                LoadReadingTypeKind_PAc = 23,
                LoadReadingTypeKind_kVARa = 24,
                LoadReadingTypeKind_kVARb = 25,
                LoadReadingTypeKind_kVARc = 26,
                LoadReadingTypeKind_kVAR = 27,
                LoadReadingTypeKind_other = 1
            };
            enum MarketKind {
                MarketKind_dam = 5,
                MarketKind_rtm = 3,
                MarketKind_ham = 2,
                MarketKind_ruc = 4,
                MarketKind_none = 0,
                MarketKind_other = 1
            };
            enum MarketProductKind {
                MarketProductKind_en = 9,
                MarketProductKind_ru = 7,
                MarketProductKind_rd = 5,
                MarketProductKind_sr = 8,
                MarketProductKind_nr = 3,
                MarketProductKind_rc = 4,
                MarketProductKind_lfu = 2,
                MarketProductKind_none = 0,
                MarketProductKind_reg = 6,
                MarketProductKind_other = 1
            };
            enum MotorOperatedSwitchControlKind {
                MotorOperatedSwitchControlKind_open = 4,
                MotorOperatedSwitchControlKind_close = 2,
                MotorOperatedSwitchControlKind_syncCheck = 3,
                MotorOperatedSwitchControlKind_none = 0,
                MotorOperatedSwitchControlKind_other = 1
            };
            enum MotorOperatedSwitchReadingTypeKind {
                MotorOperatedSwitchReadingTypeKind_Hz = 2,
                MotorOperatedSwitchReadingTypeKind_Ia = 3,
                MotorOperatedSwitchReadingTypeKind_Ib = 4,
                MotorOperatedSwitchReadingTypeKind_Ic = 5,
                MotorOperatedSwitchReadingTypeKind_Amp = 6,
                MotorOperatedSwitchReadingTypeKind_kVAa = 7,
                MotorOperatedSwitchReadingTypeKind_kVAb = 8,
                MotorOperatedSwitchReadingTypeKind_kVAc = 9,
                MotorOperatedSwitchReadingTypeKind_kVA = 10,
                MotorOperatedSwitchReadingTypeKind_kWa = 11,
                MotorOperatedSwitchReadingTypeKind_kWb = 12,
                MotorOperatedSwitchReadingTypeKind_kWc = 13,
                MotorOperatedSwitchReadingTypeKind_kW = 14,
                MotorOperatedSwitchReadingTypeKind_Va = 15,
                MotorOperatedSwitchReadingTypeKind_none = 0,
                MotorOperatedSwitchReadingTypeKind_Vb = 16,
                MotorOperatedSwitchReadingTypeKind_Vc = 17,
                MotorOperatedSwitchReadingTypeKind_Vab = 18,
                MotorOperatedSwitchReadingTypeKind_Vbc = 19,
                MotorOperatedSwitchReadingTypeKind_Vca = 20,
                MotorOperatedSwitchReadingTypeKind_PAa = 21,
                MotorOperatedSwitchReadingTypeKind_PAb = 22,
                MotorOperatedSwitchReadingTypeKind_PAc = 23,
                MotorOperatedSwitchReadingTypeKind_kVARa = 25,
                MotorOperatedSwitchReadingTypeKind_kVARb = 26,
                MotorOperatedSwitchReadingTypeKind_kVARc = 27,
                MotorOperatedSwitchReadingTypeKind_kVAR = 24,
                MotorOperatedSwitchReadingTypeKind_other = 1
            };
            enum PhaseCodeKind {
                PhaseCodeKind_A = 128,
                PhaseCodeKind_AB = 132,
                PhaseCodeKind_ABC = 224,
                PhaseCodeKind_ABCN = 225,
                PhaseCodeKind_ABN = 193,
                PhaseCodeKind_AC = 40,
                PhaseCodeKind_ACN = 41,
                PhaseCodeKind_AN = 129,
                PhaseCodeKind_B = 64,
                PhaseCodeKind_BC = 66,
                PhaseCodeKind_BCN = 97,
                PhaseCodeKind_BN = 65,
                PhaseCodeKind_C = 32,
                PhaseCodeKind_CN = 33,
                PhaseCodeKind_N = 16,
                PhaseCodeKind_none = 0,
                PhaseCodeKind_s1 = 512,
                PhaseCodeKind_s12 = 768,
                PhaseCodeKind_s12N = 769,
                PhaseCodeKind_s1N = 513,
                PhaseCodeKind_s2 = 256,
                PhaseCodeKind_s2N = 257,
                PhaseCodeKind_other = 1
            };
            enum RecloserControlKind {
                RecloserControlKind_open = 4,
                RecloserControlKind_close = 2,
                RecloserControlKind_syncCheck = 3,
                RecloserControlKind_none = 0,
                RecloserControlKind_other = 1
            };
            enum RecloserReadingTypeKind {
                RecloserReadingTypeKind_Hz = 2,
                RecloserReadingTypeKind_Ia = 3,
                RecloserReadingTypeKind_Ib = 4,
                RecloserReadingTypeKind_Ic = 5,
                RecloserReadingTypeKind_Amp = 6,
                RecloserReadingTypeKind_kVAa = 7,
                RecloserReadingTypeKind_kVAb = 8,
                RecloserReadingTypeKind_kVAc = 9,
                RecloserReadingTypeKind_kVA = 10,
                RecloserReadingTypeKind_kWa = 11,
                RecloserReadingTypeKind_kWb = 12,
                RecloserReadingTypeKind_kWc = 13,
                RecloserReadingTypeKind_kW = 14,
                RecloserReadingTypeKind_Va = 15,
                RecloserReadingTypeKind_none = 0,
                RecloserReadingTypeKind_Vb = 16,
                RecloserReadingTypeKind_Vc = 17,
                RecloserReadingTypeKind_Vab = 18,
                RecloserReadingTypeKind_Vbc = 19,
                RecloserReadingTypeKind_Vca = 20,
                RecloserReadingTypeKind_PAa = 21,
                RecloserReadingTypeKind_PAb = 22,
                RecloserReadingTypeKind_PAc = 23,
                RecloserReadingTypeKind_kVARa = 24,
                RecloserReadingTypeKind_kVARb = 25,
                RecloserReadingTypeKind_kVARc = 26,
                RecloserReadingTypeKind_kVAR = 27,
                RecloserReadingTypeKind_other = 1
            };
            enum RegulatorEventKind {
                RegulatorEventKind_tapped = 3,
                RegulatorEventKind_preTapWarning = 2,
                RegulatorEventKind_none = 0,
                RegulatorEventKind_other = 1
            };
            enum RegulatorReadingTypeKind {
                RegulatorReadingTypeKind_Hz = 2,
                RegulatorReadingTypeKind_Ia = 3,
                RegulatorReadingTypeKind_Ib = 4,
                RegulatorReadingTypeKind_Ic = 5,
                RegulatorReadingTypeKind_Amp = 6,
                RegulatorReadingTypeKind_kVAa = 7,
                RegulatorReadingTypeKind_kVAb = 8,
                RegulatorReadingTypeKind_kVAc = 9,
                RegulatorReadingTypeKind_kVA = 10,
                RegulatorReadingTypeKind_kWa = 11,
                RegulatorReadingTypeKind_kWb = 12,
                RegulatorReadingTypeKind_kWc = 13,
                RegulatorReadingTypeKind_kW = 14,
                RegulatorReadingTypeKind_Va = 15,
                RegulatorReadingTypeKind_none = 0,
                RegulatorReadingTypeKind_Vb = 16,
                RegulatorReadingTypeKind_Vc = 17,
                RegulatorReadingTypeKind_Vab = 18,
                RegulatorReadingTypeKind_Vbc = 19,
                RegulatorReadingTypeKind_Vca = 20,
                RegulatorReadingTypeKind_PAa = 21,
                RegulatorReadingTypeKind_PAb = 22,
                RegulatorReadingTypeKind_PAc = 23,
                RegulatorReadingTypeKind_kVARa = 25,
                RegulatorReadingTypeKind_kVARb = 26,
                RegulatorReadingTypeKind_kVARc = 27,
                RegulatorReadingTypeKind_kVAR = 24,
                RegulatorReadingTypeKind_other = 1
            };
            enum ResourceReadingTypeKind {
                ResourceReadingTypeKind_Hz = 2,
                ResourceReadingTypeKind_Ia = 3,
                ResourceReadingTypeKind_Ib = 4,
                ResourceReadingTypeKind_Ic = 5,
                ResourceReadingTypeKind_Amp = 6,
                ResourceReadingTypeKind_kVAa = 7,
                ResourceReadingTypeKind_kVAb = 8,
                ResourceReadingTypeKind_kVAc = 9,
                ResourceReadingTypeKind_kVA = 10,
                ResourceReadingTypeKind_kWa = 11,
                ResourceReadingTypeKind_kWb = 12,
                ResourceReadingTypeKind_kWc = 13,
                ResourceReadingTypeKind_kW = 14,
                ResourceReadingTypeKind_Va = 15,
                ResourceReadingTypeKind_none = 0,
                ResourceReadingTypeKind_Vb = 16,
                ResourceReadingTypeKind_Vc = 17,
                ResourceReadingTypeKind_Vab = 18,
                ResourceReadingTypeKind_Vbc = 19,
                ResourceReadingTypeKind_Vca = 20,
                ResourceReadingTypeKind_PAa = 21,
                ResourceReadingTypeKind_PAb = 22,
                ResourceReadingTypeKind_PAc = 23,
                ResourceReadingTypeKind_kVARa = 24,
                ResourceReadingTypeKind_kVARb = 25,
                ResourceReadingTypeKind_kVARc = 26,
                ResourceReadingTypeKind_kVAR = 27,
                ResourceReadingTypeKind_other = 1
            };
            enum ScheduleTypeKind {
                ScheduleTypeKind_ess = 6,
                ScheduleTypeKind_solar = 2,
                ScheduleTypeKind_none = 0,
                ScheduleTypeKind_load = 3,
                ScheduleTypeKind_voltageRegulator = 4,
                ScheduleTypeKind_motorOperatedSwitch = 5,
                ScheduleTypeKind_other = 1
            };
            enum ShuntControlKind {
                ShuntControlKind_powerRequest = 2,
                ShuntControlKind_none = 0,
                ShuntControlKind_other = 1
            };
            enum ShuntReadingTypeKind {
                ShuntReadingTypeKind_Hz = 2,
                ShuntReadingTypeKind_Ia = 3,
                ShuntReadingTypeKind_Ib = 4,
                ShuntReadingTypeKind_Ic = 5,
                ShuntReadingTypeKind_Amp = 6,
                ShuntReadingTypeKind_kVAa = 7,
                ShuntReadingTypeKind_kVAb = 8,
                ShuntReadingTypeKind_kVAc = 9,
                ShuntReadingTypeKind_kVA = 10,
                ShuntReadingTypeKind_kWa = 11,
                ShuntReadingTypeKind_kWb = 12,
                ShuntReadingTypeKind_kWc = 13,
                ShuntReadingTypeKind_kW = 14,
                ShuntReadingTypeKind_Va = 15,
                ShuntReadingTypeKind_none = 0,
                ShuntReadingTypeKind_Vb = 16,
                ShuntReadingTypeKind_Vc = 17,
                ShuntReadingTypeKind_Vab = 18,
                ShuntReadingTypeKind_Vbc = 19,
                ShuntReadingTypeKind_Vca = 20,
                ShuntReadingTypeKind_PAa = 21,
                ShuntReadingTypeKind_PAb = 22,
                ShuntReadingTypeKind_PAc = 23,
                ShuntReadingTypeKind_kVARa = 24,
                ShuntReadingTypeKind_kVARb = 25,
                ShuntReadingTypeKind_kVARc = 26,
                ShuntReadingTypeKind_kVAR = 27,
                ShuntReadingTypeKind_other = 1
            };
            enum SolarControlKind {
                SolarControlKind_connect = 3,
                SolarControlKind_disconnect = 2,
                SolarControlKind_none = 0,
                SolarControlKind_powerRequest = 4,
                SolarControlKind_other = 1
            };
            enum SolarEventKind {
                SolarEventKind_generatingAndConnected = 5,
                SolarEventKind_generatingAndAvailableForConnection = 2,
                SolarEventKind_none = 0,
                SolarEventKind_offButAvailableForGenerating = 3,
                SolarEventKind_offAndNotAvailableForGenerating = 4,
                SolarEventKind_other = 1
            };
            enum SolarReadingTypeKind {
                SolarReadingTypeKind_Hz = 2,
                SolarReadingTypeKind_Ia = 3,
                SolarReadingTypeKind_Ib = 4,
                SolarReadingTypeKind_Ic = 5,
                SolarReadingTypeKind_Amp = 6,
                SolarReadingTypeKind_kVAa = 7,
                SolarReadingTypeKind_kVAb = 8,
                SolarReadingTypeKind_kVAc = 9,
                SolarReadingTypeKind_kVA = 10,
                SolarReadingTypeKind_kWa = 11,
                SolarReadingTypeKind_kWb = 12,
                SolarReadingTypeKind_kWc = 13,
                SolarReadingTypeKind_kW = 14,
                SolarReadingTypeKind_Va = 15,
                SolarReadingTypeKind_none = 0,
                SolarReadingTypeKind_Vb = 16,
                SolarReadingTypeKind_Vc = 17,
                SolarReadingTypeKind_Vab = 18,
                SolarReadingTypeKind_Vbc = 19,
                SolarReadingTypeKind_Vca = 20,
                SolarReadingTypeKind_PAa = 21,
                SolarReadingTypeKind_PAb = 22,
                SolarReadingTypeKind_PAc = 23,
                SolarReadingTypeKind_kVARa = 24,
                SolarReadingTypeKind_kVARb = 25,
                SolarReadingTypeKind_kVARc = 26,
                SolarReadingTypeKind_kVAR = 27,
                SolarReadingTypeKind_other = 1
            };
            enum SwitchEventKind {
                SwitchEventKind_closed = 3,
                SwitchEventKind_open = 2,
                SwitchEventKind_none = 0,
                SwitchEventKind_other = 1
            };
            enum UnitMultiplierKind {
                UnitMultiplierKind_centi = 2,
                UnitMultiplierKind_deci = 3,
                UnitMultiplierKind_Giga = 4,
                UnitMultiplierKind_kilo = 5,
                UnitMultiplierKind_milli = 8,
                UnitMultiplierKind_Mega = 6,
                UnitMultiplierKind_micro = 7,
                UnitMultiplierKind_nano = 9,
                UnitMultiplierKind_none = 0,
                UnitMultiplierKind_pico = 10,
                UnitMultiplierKind_Tera = 11,
                UnitMultiplierKind_other = 1
            };
            enum UnitSymbolKind {
                UnitSymbolKind_Amp = 5,
                UnitSymbolKind_deg = 9,
                UnitSymbolKind_degC = 23,
                UnitSymbolKind_degF = 279,
                UnitSymbolKind_Farad = 25,
                UnitSymbolKind_gram = 3,
                UnitSymbolKind_hour = 160,
                UnitSymbolKind_Henry = 28,
                UnitSymbolKind_Hz = 33,
                UnitSymbolKind_Joule = 31,
                UnitSymbolKind_meter = 2,
                UnitSymbolKind_m2 = 41,
                UnitSymbolKind_m3 = 166,
                UnitSymbolKind_min = 159,
                UnitSymbolKind_mph = 500,
                UnitSymbolKind_Newton = 32,
                UnitSymbolKind_none = 0,
                UnitSymbolKind_ohm = 30,
                UnitSymbolKind_Pa = 39,
                UnitSymbolKind_rad = 10,
                UnitSymbolKind_Siemens = 53,
                UnitSymbolKind_sec = 27,
                UnitSymbolKind_V = 29,
                UnitSymbolKind_VA = 61,
                UnitSymbolKind_VAh = 71,
                UnitSymbolKind_VAr = 63,
                UnitSymbolKind_VArh = 73,
                UnitSymbolKind_W = 38,
                UnitSymbolKind_Wh = 72,
                UnitSymbolKind_wPerVA = 65,
                UnitSymbolKind_wPerM2 = 179,
                UnitSymbolKind_hzPerS = 75,
                UnitSymbolKind_wPerS = 81,
                UnitSymbolKind_other = 100
            };
        }; /* module commonmodule */

        module essmodule {
            struct ESSControlProfile;
            struct ESSControlScheduleProfile;
            struct ESSStatusProfile;
            struct ESSEventProfile;
            struct ESSReadingProfile;
        }; /* module essmodule */

        module generationmodule {
            struct GenerationControlScheduleProfile;
            struct GenerationControlProfile;
            struct GenerationForecastProfile;
            struct GenerationReadingProfile;
            struct GenerationEventProfile;
            struct GenerationStatusProfile;
        }; /* module generationmodule */

        module interchangemodule {
            struct InterchangeScheduleProfile;
        }; /* module interchangemodule */

        module interconnectionmodule {
            struct PlannedInterconnectionScheduleProfile;
            struct RequestedInterconnectionScheduleProfile;
        }; /* module interconnectionmodule */

        module loadmodule {
            struct LoadControlScheduleProfile;
            struct LoadControlProfile;
            struct LoadForecastProfile;
            struct LoadReadingProfile;
            struct LoadStatusProfile;
        }; /* module loadmodule */

        module motoroperatedswitchmodule {
            struct MotorOperatedSwitchControlProfile;
            struct MotorOperatedSwitchControlScheduleProfile;
            struct MotorOperatedSwitchEventProfile;
            struct MotorOperatedSwitchReadingProfile;
            struct MotorOperatedSwitchStatusProfile;
        }; /* module motoroperatedswitchmodule */

        module optimizermodule {
            struct ESSControlScheduleProfileList;
            struct LoadControlScheduleProfileList;
            struct PlannedInterconnectionScheduleProfileList;
            struct PlannedOptimizerScheduleProfile;
            struct RegulatorControlScheduleProfileList;
            struct RequestedInterconnectionScheduleProfileList;
            struct SolarControlScheduleProfileList;
            struct RequestedOptimizerScheduleProfile;
        }; /* module optimizermodule */

        module reclosermodule {
            struct RecloserControlProfile;
            struct RecloserEventProfile;
            struct RecloserReadingProfile;
            struct RecloserStatusProfile;
        }; /* module reclosermodule */

        module regulatormodule {
            struct RegulatorControlScheduleProfile;
            struct RegulatorStatusProfile;
            struct RegulatorEventProfile;
            struct RegulatorReadingProfile;
        }; /* module regulatormodule */

        module resourcemodule {
            struct ResourceReadingProfile;
            struct ResourceStatusProfile;
        }; /* module resourcemodule */

        module securitymodule {
            struct SecurityEventProfile;
        }; /* module securitymodule */

        module shuntmodule {
            struct ShuntControlScheduleProfile;
            struct ShuntControlProfile;
            struct ShuntStatusProfile;
            struct ShuntReadingProfile;
        }; /* module shuntmodule */

        module solarmodule {
            struct SolarControlScheduleProfile;
            struct SolarCapabilityProfile;
            struct SolarControlProfile;
            struct SolarForecastProfile;
            struct SolarEventProfile;
            struct SolarReadingProfile;
            struct SolarStatusProfile;
        }; /* module solarmodule */

        module weathermodule {
            struct WeatherDataProfile;
        }; /* module weathermodule */

    }; /* module openfmb */

}; /* module OpenFMB_Information_Model */

module OpenFMB_Information_Model {
    module openfmb {
        module commonmodule {
            struct ActivePower {
                float value;  //@Optional
                OpenFMB_Information_Model::openfmb::commonmodule::UnitSymbolKind unit;  //@Optional
                OpenFMB_Information_Model::openfmb::commonmodule::UnitMultiplierKind multiplier;  //@Optional
            };  //@top-level FALSE

            struct BasicIntervalSchedule {
                UML_Extension::dateTime startTime;  //@Optional
                OpenFMB_Information_Model::openfmb::commonmodule::UnitMultiplierKind value1Multiplier;  //@Optional
                OpenFMB_Information_Model::openfmb::commonmodule::UnitSymbolKind value1Unit;  //@Optional
                OpenFMB_Information_Model::openfmb::commonmodule::UnitMultiplierKind value2Multiplier;  //@Optional
                OpenFMB_Information_Model::openfmb::commonmodule::UnitSymbolKind value2Unit;  //@Optional
            };  //@top-level FALSE

            struct Container {
                string logicalDeviceID;  //@Key
                UML_Extension::dateTime timestamp;
            };  //@top-level FALSE

            struct CurveData {
                float xvalue;  //@Optional
                float yvalue;  //@Optional
            };  //@top-level FALSE

            struct CurveDataList {
                sequence<OpenFMB_Information_Model::openfmb::commonmodule::CurveData>  curveData;
            };  //@top-level FALSE

            struct DateTimeInterval {
                UML_Extension::dateTime end;  //@Optional
                UML_Extension::dateTime start;  //@Optional
            };  //@top-level FALSE

            struct HumidityData {
                UML_Extension::dateTime timestamp;  //@Optional
                float value;  //@Optional
            };  //@top-level FALSE

            struct HumidityDataList {
                sequence<OpenFMB_Information_Model::openfmb::commonmodule::HumidityData>  humidityData;
            };  //@top-level FALSE

            struct IrregularTimePoint {
                float value1;  //@Optional
                float value2;  //@Optional
            };  //@top-level FALSE

            struct IrregularTimePointList {
                sequence<OpenFMB_Information_Model::openfmb::commonmodule::IrregularTimePoint>  irregularTimePoint;
            };  //@top-level FALSE

            struct MarketFactors {
                UML_Extension::dateTime intervalEndTime;  //@Optional
                UML_Extension::dateTime intervalStartTime;  //@Optional
            };  //@top-level FALSE

            struct MarketRun {
                OpenFMB_Information_Model::openfmb::commonmodule::ExecutionKind executionType;  //@Optional
                UML_Extension::dateTime marketEndTime;  //@Optional
                string marketID;  //@Optional
                string marketRunID;  //@Optional
                UML_Extension::dateTime marketStartTime;  //@Optional
                OpenFMB_Information_Model::openfmb::commonmodule::MarketKind marketType;  //@Optional
                string marketTypeExtension;  //@Optional
                string executionTypeExtension;  //@Optional
            };  //@top-level FALSE

            struct MarketRunList {
                sequence<OpenFMB_Information_Model::openfmb::commonmodule::MarketRun>  marketRun;
            };  //@top-level FALSE

            struct MotorOperatedSwitchEvent {
                OpenFMB_Information_Model::openfmb::commonmodule::HexBinary16 qualityFlag;  //@Optional
                UML_Extension::dateTime timestamp;  //@Optional
                OpenFMB_Information_Model::openfmb::commonmodule::SwitchEventKind type;
                string typeExtension;  //@Optional
            };  //@top-level FALSE

            struct Reading {
                OpenFMB_Information_Model::openfmb::commonmodule::HexBinary16 qualityFlag;  //@Optional
                OpenFMB_Information_Model::openfmb::commonmodule::DateTimeInterval timePeriod;  //@Optional
                float value;
            };  //@top-level FALSE

            struct RecloserEvent {
                boolean isBlocked;  //@Optional
                OpenFMB_Information_Model::openfmb::commonmodule::SwitchEventKind type;
                boolean normalOpen;  //@Optional
                OpenFMB_Information_Model::openfmb::commonmodule::HexBinary16 qualityFlag;  //@Optional
                UML_Extension::dateTime timestamp;  //@Optional
                string typeExtension;  //@Optional
            };  //@top-level FALSE

            struct RecloserReading : OpenFMB_Information_Model::openfmb::commonmodule::Reading {
                string typeExtension;  //@Optional
                string terminalID;  //@Optional
                OpenFMB_Information_Model::openfmb::commonmodule::RecloserReadingTypeKind type;
            };  //@top-level FALSE

            struct RecloserReadingList {
                sequence<OpenFMB_Information_Model::openfmb::commonmodule::RecloserReading>  recloserReading;
            };  //@top-level FALSE

            struct RegulatorEvent {
                OpenFMB_Information_Model::openfmb::commonmodule::HexBinary16 qualityFlag;  //@Optional
                UML_Extension::dateTime timestamp;  //@Optional
                OpenFMB_Information_Model::openfmb::commonmodule::RegulatorEventKind type;
                string typeExtension;  //@Optional
            };  //@top-level FALSE

            struct RegulatorReading : OpenFMB_Information_Model::openfmb::commonmodule::Reading {
                string typeExtension;  //@Optional
                OpenFMB_Information_Model::openfmb::commonmodule::RegulatorReadingTypeKind type;
            };  //@top-level FALSE

            struct RegulatorReadingList {
                sequence<OpenFMB_Information_Model::openfmb::commonmodule::RegulatorReading>  regulatorReading;
            };  //@top-level FALSE

            struct ResourceReading : OpenFMB_Information_Model::openfmb::commonmodule::Reading {
                string typeExtension;  //@Optional
                OpenFMB_Information_Model::openfmb::commonmodule::ResourceReadingTypeKind type;
            };  //@top-level FALSE

            struct ResourceReadingList {
                sequence<OpenFMB_Information_Model::openfmb::commonmodule::ResourceReading>  resourceReading;
            };  //@top-level FALSE

            struct SetPoint {
                OpenFMB_Information_Model::openfmb::commonmodule::UnitMultiplierKind multiplier;  //@Optional
                OpenFMB_Information_Model::openfmb::commonmodule::UnitSymbolKind unit;  //@Optional
                string name;  //@Optional
                float value;  //@Optional
            };  //@top-level FALSE

            struct SetPointList {
                sequence<OpenFMB_Information_Model::openfmb::commonmodule::SetPoint>  setPoint;
            };  //@top-level FALSE

            struct ShuntControl {
                string issueID;  //@Optional
                string name;  //@Optional
                OpenFMB_Information_Model::openfmb::commonmodule::DateTimeInterval scheduledInterval;  //@Optional
                OpenFMB_Information_Model::openfmb::commonmodule::ShuntControlKind type;
                string typeExtension;  //@Optional
                OpenFMB_Information_Model::openfmb::commonmodule::SetPointList  setPointList; //@Optional
            };  //@top-level FALSE

            struct ShuntReading : OpenFMB_Information_Model::openfmb::commonmodule::Reading {
                string typeExtension;  //@Optional
                OpenFMB_Information_Model::openfmb::commonmodule::ShuntReadingTypeKind type;
            };  //@top-level FALSE

            struct ShuntReadingList {
                sequence<OpenFMB_Information_Model::openfmb::commonmodule::ShuntReading>  shuntReading;
            };  //@top-level FALSE

            struct SolarCapability {
                float ahrRtg;  //@Optional
                string qualityFlag;  //@Optional
                UML_Extension::dateTime timestamp;  //@Optional
                float voltage;  //@Optional
                float wRtgMaxVal;  //@Optional
                float wRtgMinVal;  //@Optional
            };  //@top-level FALSE

            struct SolarControl {
                boolean isIslanded;  //@Optional
                string issueID;  //@Optional
                OpenFMB_Information_Model::openfmb::commonmodule::DateTimeInterval scheduledInterval;  //@Optional
                OpenFMB_Information_Model::openfmb::commonmodule::SolarControlKind type;
                string typeExtension;  //@Optional
                OpenFMB_Information_Model::openfmb::commonmodule::SetPointList  setPointList; //@Optional
            };  //@top-level FALSE

            struct SolarInverterEvent {
                boolean isConnected;  //@Optional
                OpenFMB_Information_Model::openfmb::commonmodule::SolarEventKind type;
                UML_Extension::dateTime timestamp;  //@Optional
                OpenFMB_Information_Model::openfmb::commonmodule::HexBinary16 qualityFlag;  //@Optional
                string typeExtension;  //@Optional
            };  //@top-level FALSE

            struct SolarReading : OpenFMB_Information_Model::openfmb::commonmodule::Reading {
                string typeExtension;  //@Optional
                OpenFMB_Information_Model::openfmb::commonmodule::SolarReadingTypeKind type;
            };  //@top-level FALSE

            struct SolarReadingList {
                sequence<OpenFMB_Information_Model::openfmb::commonmodule::SolarReading>  solarReading;
            };  //@top-level FALSE

            struct StringMeasurementValue {
                OpenFMB_Information_Model::openfmb::commonmodule::HexBinary16 qualityFlag;  //@Optional
                string source;  //@Optional
                UML_Extension::dateTime timeStamp;  //@Optional
                string value;
            };  //@top-level FALSE

            struct SunRadiationData {
                UML_Extension::dateTime timestamp;  //@Optional
                float value;  //@Optional
            };  //@top-level FALSE

            struct SunRadiationDataList {
                sequence<OpenFMB_Information_Model::openfmb::commonmodule::SunRadiationData>  sunRadiationData;
            };  //@top-level FALSE

            struct TemperatureData {
                UML_Extension::dateTime timestamp;  //@Optional
                float value;  //@Optional
            };  //@top-level FALSE

            struct TemperatureDataList {
                sequence<OpenFMB_Information_Model::openfmb::commonmodule::TemperatureData>  temperatureData;
            };  //@top-level FALSE

            struct WindData {
                UML_Extension::dateTime timestamp;  //@Optional
                float windDirection;  //@Optional
                float windSpeed;  //@Optional
            };  //@top-level FALSE

            struct WindDataList {
                sequence<OpenFMB_Information_Model::openfmb::commonmodule::WindData>  windData;
            };  //@top-level FALSE

        }; /* module commonmodule */

    }; /* module openfmb */

}; /* module OpenFMB_Information_Model */

module OpenFMB_Information_Model {
    module openfmb {
        module commonmodule {
            struct AnalogValue {
                OpenFMB_Information_Model::openfmb::commonmodule::HexBinary16 qualityFlag;  //@Optional
                string source;  //@Optional
                UML_Extension::dateTime timeStamp;  //@Optional
                float value;
            };  //@top-level FALSE

            struct BooleanMeasurementValue {
                OpenFMB_Information_Model::openfmb::commonmodule::HexBinary16 qualityFlag;  //@Optional
                string source;  //@Optional
                UML_Extension::dateTime timeStamp;  //@Optional
                boolean value;
            };  //@top-level FALSE

            struct BreakerEvent {
                boolean isBlocked;  //@Optional
                OpenFMB_Information_Model::openfmb::commonmodule::SwitchEventKind type;
                boolean normalOpen;  //@Optional
                UML_Extension::dateTime timestamp;  //@Optional
                OpenFMB_Information_Model::openfmb::commonmodule::HexBinary16 qualityFlag;  //@Optional
                string typeExtension;  //@Optional
            };  //@top-level FALSE

            struct BreakerReading : OpenFMB_Information_Model::openfmb::commonmodule::Reading {
                string terminalID;  //@Optional
                OpenFMB_Information_Model::openfmb::commonmodule::BreakerReadingTypeKind type;
                string typeExtension;  //@Optional
            };  //@top-level FALSE

            struct BreakerReadingList {
                sequence<OpenFMB_Information_Model::openfmb::commonmodule::BreakerReading>  breakerReading;
            };  //@top-level FALSE

            struct Curve {
                OpenFMB_Information_Model::openfmb::commonmodule::CurveStyleKind curveStyle;  //@Optional
                OpenFMB_Information_Model::openfmb::commonmodule::UnitMultiplierKind xMultiplier;  //@Optional
                OpenFMB_Information_Model::openfmb::commonmodule::UnitSymbolKind xUnit;  //@Optional
                OpenFMB_Information_Model::openfmb::commonmodule::UnitMultiplierKind yMultiplier;  //@Optional
                OpenFMB_Information_Model::openfmb::commonmodule::UnitSymbolKind yUnit;  //@Optional
                OpenFMB_Information_Model::openfmb::commonmodule::CurveNameKind name;  //@Optional
                OpenFMB_Information_Model::openfmb::commonmodule::CurveDataList  curveDataList;
            };  //@top-level FALSE

            struct DiscreteValue {
                OpenFMB_Information_Model::openfmb::commonmodule::HexBinary16 qualityFlag;  //@Optional
                string source;  //@Optional
                UML_Extension::dateTime timeStamp;  //@Optional
                long value;
            };  //@top-level FALSE

            struct ESSControl {
                string issueID;  //@Optional
                OpenFMB_Information_Model::openfmb::commonmodule::DateTimeInterval scheduledInterval;  //@Optional
                OpenFMB_Information_Model::openfmb::commonmodule::InverterModeKind inverterMode;  //@Optional
                OpenFMB_Information_Model::openfmb::commonmodule::ESSControlKind type;
                string typeExtension;  //@Optional
                string inverterModeExtension;  //@Optional
                OpenFMB_Information_Model::openfmb::commonmodule::SetPointList  setPointList; //@Optional
            };  //@top-level FALSE

            struct ESSControlSchedule : OpenFMB_Information_Model::openfmb::commonmodule::Curve {
                OpenFMB_Information_Model::openfmb::commonmodule::InverterModeKind inverterMode;  //@Optional
                OpenFMB_Information_Model::openfmb::commonmodule::DateTimeInterval dateTimeInterval;  //@Optional
                string inverterModeExtension;  //@Optional
            };  //@top-level FALSE

            struct ESSControlScheduleList {
                sequence<OpenFMB_Information_Model::openfmb::commonmodule::ESSControlSchedule>  essControlSchedule;
            };  //@top-level FALSE

            struct ESSEvent {
                boolean isConnected;  //@Optional
                OpenFMB_Information_Model::openfmb::commonmodule::ESSEventKind type;
                float stateOfCharge;  //@Optional
                OpenFMB_Information_Model::openfmb::commonmodule::HexBinary16 qualityFlag;  //@Optional
                UML_Extension::dateTime timestamp;  //@Optional
                string typeExtension;  //@Optional
            };  //@top-level FALSE

            struct ESSReading : OpenFMB_Information_Model::openfmb::commonmodule::Reading {
                string typeExtension;  //@Optional
                OpenFMB_Information_Model::openfmb::commonmodule::ESSReadingTypeKind type;
            };  //@top-level FALSE

            struct ESSReadingList {
                sequence<OpenFMB_Information_Model::openfmb::commonmodule::ESSReading>  essReading;
            };  //@top-level FALSE

            struct ForecastSchedule : OpenFMB_Information_Model::openfmb::commonmodule::BasicIntervalSchedule {
                string version;  //@Optional
                UML_Extension::dateTime versionDateTime;  //@Optional
                OpenFMB_Information_Model::openfmb::commonmodule::IrregularTimePointList  irregularTimePointList; //@Optional
            };  //@top-level FALSE

            struct GenerationControl {
                string issueID;  //@Optional
                string name;  //@Optional
                OpenFMB_Information_Model::openfmb::commonmodule::DateTimeInterval scheduledInterval;  //@Optional
                OpenFMB_Information_Model::openfmb::commonmodule::GenerationControlKind type;
                string typeExtension;  //@Optional
                OpenFMB_Information_Model::openfmb::commonmodule::SetPointList  setPointList; //@Optional
            };  //@top-level FALSE

            struct GenerationControlSchedule : OpenFMB_Information_Model::openfmb::commonmodule::Curve {
                OpenFMB_Information_Model::openfmb::commonmodule::DateTimeInterval dateTimeInterval;  //@Optional
            };  //@top-level FALSE

            struct GenerationControlScheduleList {
                sequence<OpenFMB_Information_Model::openfmb::commonmodule::GenerationControlSchedule>  generationControlSchedule;
            };  //@top-level FALSE

            struct GenerationEvent {
                boolean isAutoOn;  //@Optional
                boolean isConnected;  //@Optional
                OpenFMB_Information_Model::openfmb::commonmodule::GenerationEventKind type;
                OpenFMB_Information_Model::openfmb::commonmodule::HexBinary16 qualityFlag;  //@Optional
                UML_Extension::dateTime timestamp;  //@Optional
                string typeExtension;  //@Optional
            };  //@top-level FALSE

            struct GenerationReading : OpenFMB_Information_Model::openfmb::commonmodule::Reading {
                string typeExtension;  //@Optional
                OpenFMB_Information_Model::openfmb::commonmodule::GenerationReadingTypeKind type;
            };  //@top-level FALSE

            struct GenerationReadingList {
                sequence<OpenFMB_Information_Model::openfmb::commonmodule::GenerationReading>  generationReading;
            };  //@top-level FALSE

            struct Humidity {
                OpenFMB_Information_Model::openfmb::commonmodule::UnitSymbolKind unit;  //@Optional
                OpenFMB_Information_Model::openfmb::commonmodule::HumidityDataList  humidityDataList; //@Optional
            };  //@top-level FALSE

            struct IdentifiedObject {
                OpenFMB_Information_Model::openfmb::commonmodule::uuidType mRID;  //@Optional
                string description;  //@Optional
                string name;  //@Optional
            };  //@top-level FALSE

            struct InterconnectionPoint : OpenFMB_Information_Model::openfmb::commonmodule::IdentifiedObject {
                octet __dummy_prevent_empty_class_InterconnectionPoint;
            };  //@top-level FALSE

            struct InterconnectionSchedule : OpenFMB_Information_Model::openfmb::commonmodule::Curve {
                OpenFMB_Information_Model::openfmb::commonmodule::InverterModeKind inverterMode;  //@Optional
                OpenFMB_Information_Model::openfmb::commonmodule::ScheduleTypeKind type;
                OpenFMB_Information_Model::openfmb::commonmodule::DateTimeInterval dateTimeInterval;  //@Optional
                string typeExtension;  //@Optional
                string inverterModeExtension;  //@Optional
            };  //@top-level FALSE

            struct InterconnectionScheduleList {
                sequence<OpenFMB_Information_Model::openfmb::commonmodule::InterconnectionSchedule>  interconnectionSchedule;
            };  //@top-level FALSE

            struct LoadControl {
                string issueID;  //@Optional
                string name;  //@Optional
                OpenFMB_Information_Model::openfmb::commonmodule::DateTimeInterval scheduledInterval;  //@Optional
                OpenFMB_Information_Model::openfmb::commonmodule::LoadControlKind type;
                string typeExtension;  //@Optional
                OpenFMB_Information_Model::openfmb::commonmodule::SetPointList  setPointList; //@Optional
            };  //@top-level FALSE

            struct LoadControlSchedule : OpenFMB_Information_Model::openfmb::commonmodule::Curve {
                OpenFMB_Information_Model::openfmb::commonmodule::DateTimeInterval dateTimeInterval;  //@Optional
            };  //@top-level FALSE

            struct LoadControlScheduleList {
                sequence<OpenFMB_Information_Model::openfmb::commonmodule::LoadControlSchedule>  loadControlSchedule;
            };  //@top-level FALSE

            struct LoadReading : OpenFMB_Information_Model::openfmb::commonmodule::Reading {
                string typeExtension;  //@Optional
                OpenFMB_Information_Model::openfmb::commonmodule::LoadReadingTypeKind type;
            };  //@top-level FALSE

            struct LoadReadingList {
                sequence<OpenFMB_Information_Model::openfmb::commonmodule::LoadReading>  loadReading;
            };  //@top-level FALSE

            struct MarketFactorList {
                sequence<OpenFMB_Information_Model::openfmb::commonmodule::MarketFactors>  marketFactor;
            };  //@top-level FALSE

            struct MotorOperatedSwitch : OpenFMB_Information_Model::openfmb::commonmodule::IdentifiedObject {
                octet __dummy_prevent_empty_class_MotorOperatedSwitch;
            };  //@top-level FALSE

            struct MotorOperatedSwitchControl {
                string name;  //@Optional
                OpenFMB_Information_Model::openfmb::commonmodule::MotorOperatedSwitchControlKind type;
                string issueID;  //@Optional
                OpenFMB_Information_Model::openfmb::commonmodule::DateTimeInterval scheduledInterval;  //@Optional
                string typeExtension;  //@Optional
                OpenFMB_Information_Model::openfmb::commonmodule::SetPointList  setPointList; //@Optional
            };  //@top-level FALSE

            struct MotorOperatedSwitchControlSchedule : OpenFMB_Information_Model::openfmb::commonmodule::Curve {
                OpenFMB_Information_Model::openfmb::commonmodule::DateTimeInterval dateTimeInterval;  //@Optional
            };  //@top-level FALSE

            struct MotorOperatedSwitchControlScheduleList {
                sequence<OpenFMB_Information_Model::openfmb::commonmodule::MotorOperatedSwitchControlSchedule>  motorOperatedSwitchControlSchedule;
            };  //@top-level FALSE

            struct MotorOperatedSwitchReading : OpenFMB_Information_Model::openfmb::commonmodule::Reading {
                string typeExtension;  //@Optional
                string terminalID;  //@Optional
                OpenFMB_Information_Model::openfmb::commonmodule::MotorOperatedSwitchReadingTypeKind type;
            };  //@top-level FALSE

            struct MotorOperatedSwitchReadingList {
                sequence<OpenFMB_Information_Model::openfmb::commonmodule::MotorOperatedSwitchReading>  motorOperatedSwitchReading;
            };  //@top-level FALSE

            struct PowerSystemResource : OpenFMB_Information_Model::openfmb::commonmodule::IdentifiedObject {
                octet __dummy_prevent_empty_class_PowerSystemResource;
            };  //@top-level FALSE

            struct Recloser : OpenFMB_Information_Model::openfmb::commonmodule::IdentifiedObject {
                boolean normalOpen;  //@Optional
            };  //@top-level FALSE

            struct RecloserControl {
                string name;  //@Optional
                OpenFMB_Information_Model::openfmb::commonmodule::RecloserControlKind type;
                string issueID;  //@Optional
                OpenFMB_Information_Model::openfmb::commonmodule::DateTimeInterval scheduledInterval;  //@Optional
                string typeExtension;  //@Optional
                OpenFMB_Information_Model::openfmb::commonmodule::SetPointList  setPointList; //@Optional
            };  //@top-level FALSE

            struct RegulatorControlSchedule : OpenFMB_Information_Model::openfmb::commonmodule::Curve {
                OpenFMB_Information_Model::openfmb::commonmodule::DateTimeInterval dateTimeInterval;  //@Optional
            };  //@top-level FALSE

            struct RegulatorControlScheduleList {
                sequence<OpenFMB_Information_Model::openfmb::commonmodule::RegulatorControlSchedule>  regulatorControlSchedule;
            };  //@top-level FALSE

            struct RegulatorSystem : OpenFMB_Information_Model::openfmb::commonmodule::IdentifiedObject {
                octet __dummy_prevent_empty_class_RegulatorSystem;
            };  //@top-level FALSE

            struct ShuntControlSchedule : OpenFMB_Information_Model::openfmb::commonmodule::Curve {
                OpenFMB_Information_Model::openfmb::commonmodule::DateTimeInterval dateTimeInterval;  //@Optional
            };  //@top-level FALSE

            struct ShuntControlScheduleList {
                sequence<OpenFMB_Information_Model::openfmb::commonmodule::ShuntControlSchedule>  shuntControlSchedule;
            };  //@top-level FALSE

            struct ShuntSystem : OpenFMB_Information_Model::openfmb::commonmodule::IdentifiedObject {
                octet __dummy_prevent_empty_class_ShuntSystem;
            };  //@top-level FALSE

            struct SolarControlSchedule : OpenFMB_Information_Model::openfmb::commonmodule::Curve {
                OpenFMB_Information_Model::openfmb::commonmodule::InverterModeKind inverterMode;
                OpenFMB_Information_Model::openfmb::commonmodule::DateTimeInterval dateTimeInterval;  //@Optional
                string inverterModeExtension;  //@Optional
            };  //@top-level FALSE

            struct SolarControlScheduleList {
                sequence<OpenFMB_Information_Model::openfmb::commonmodule::SolarControlSchedule>  solarControlSchedule;
            };  //@top-level FALSE

            struct SolarInverter : OpenFMB_Information_Model::openfmb::commonmodule::IdentifiedObject {
                octet __dummy_prevent_empty_class_SolarInverter;
            };  //@top-level FALSE

            struct StringMeasurement {
                string mRID;  //@Optional
                string description;  //@Optional
                string measurementType;  //@Optional
                OpenFMB_Information_Model::openfmb::commonmodule::UnitMultiplierKind multiplier;  //@Optional
                string name;  //@Optional
                OpenFMB_Information_Model::openfmb::commonmodule::PhaseCodeKind phases;  //@Optional
                OpenFMB_Information_Model::openfmb::commonmodule::UnitSymbolKind unit;  //@Optional
                OpenFMB_Information_Model::openfmb::commonmodule::StringMeasurementValue  stringMeasurementValue;
            };  //@top-level FALSE

            struct StringMeasurementList {
                sequence<OpenFMB_Information_Model::openfmb::commonmodule::StringMeasurement>  stringMeasurement;
            };  //@top-level FALSE

            struct SunRadiation {
                OpenFMB_Information_Model::openfmb::commonmodule::UnitMultiplierKind multiplier;  //@Optional
                OpenFMB_Information_Model::openfmb::commonmodule::UnitSymbolKind unit;  //@Optional
                OpenFMB_Information_Model::openfmb::commonmodule::SunRadiationDataList  sunRadiationDataList; //@Optional
            };  //@top-level FALSE

            struct Temperature {
                OpenFMB_Information_Model::openfmb::commonmodule::UnitSymbolKind unit;  //@Optional
                OpenFMB_Information_Model::openfmb::commonmodule::TemperatureDataList  temperatureDataList; //@Optional
            };  //@top-level FALSE

            struct Wind {
                OpenFMB_Information_Model::openfmb::commonmodule::UnitSymbolKind directionUnit;  //@Optional
                OpenFMB_Information_Model::openfmb::commonmodule::UnitSymbolKind speedUnit;  //@Optional
                OpenFMB_Information_Model::openfmb::commonmodule::WindDataList  windDataList; //@Optional
            };  //@top-level FALSE

        }; /* module commonmodule */

        module interconnectionmodule {
            struct PlannedInterconnectionScheduleProfile : OpenFMB_Information_Model::openfmb::commonmodule::Container {
                OpenFMB_Information_Model::openfmb::commonmodule::InterconnectionPoint  interconnectionPoint;
                OpenFMB_Information_Model::openfmb::commonmodule::InterconnectionScheduleList  interconnectionScheduleList;
            };  //@top-level TRUE

            struct RequestedInterconnectionScheduleProfile : OpenFMB_Information_Model::openfmb::commonmodule::Container {
                OpenFMB_Information_Model::openfmb::commonmodule::InterconnectionPoint  interconnectionPoint;
                OpenFMB_Information_Model::openfmb::commonmodule::InterconnectionScheduleList  interconnectionScheduleList;
            };  //@top-level TRUE

        }; /* module interconnectionmodule */

        module motoroperatedswitchmodule {
            struct MotorOperatedSwitchControlProfile : OpenFMB_Information_Model::openfmb::commonmodule::Container {
                OpenFMB_Information_Model::openfmb::commonmodule::MotorOperatedSwitch  motorOperatedSwitch;
                OpenFMB_Information_Model::openfmb::commonmodule::MotorOperatedSwitchControl  motorOperatedSwitchControl;
            };  //@top-level TRUE

            struct MotorOperatedSwitchControlScheduleProfile : OpenFMB_Information_Model::openfmb::commonmodule::Container {
                OpenFMB_Information_Model::openfmb::commonmodule::MotorOperatedSwitch  motorOperatedSwitch;
                OpenFMB_Information_Model::openfmb::commonmodule::MotorOperatedSwitchControlScheduleList  motorOperatedSwitchControlScheduleList;
            };  //@top-level TRUE

            struct MotorOperatedSwitchEventProfile : OpenFMB_Information_Model::openfmb::commonmodule::Container {
                OpenFMB_Information_Model::openfmb::commonmodule::MotorOperatedSwitch  motorOperatedSwitch;
                OpenFMB_Information_Model::openfmb::commonmodule::MotorOperatedSwitchEvent  motorOperatedSwitchEvent;
            };  //@top-level TRUE

            struct MotorOperatedSwitchReadingProfile : OpenFMB_Information_Model::openfmb::commonmodule::Container {
                OpenFMB_Information_Model::openfmb::commonmodule::MotorOperatedSwitchReadingList  motorOperatedSwitchReadingList;
                OpenFMB_Information_Model::openfmb::commonmodule::MotorOperatedSwitch  motorOperatedSwitch;
            };  //@top-level TRUE

        }; /* module motoroperatedswitchmodule */

        module optimizermodule {
            struct PlannedInterconnectionScheduleProfileList {
                sequence<OpenFMB_Information_Model::openfmb::interconnectionmodule::PlannedInterconnectionScheduleProfile>  plannedInterconnectionScheduleProfile;
            };  //@top-level FALSE

            struct RequestedInterconnectionScheduleProfileList {
                sequence<OpenFMB_Information_Model::openfmb::interconnectionmodule::RequestedInterconnectionScheduleProfile>  requestedInterconnectionScheduleProfile;
            };  //@top-level FALSE

        }; /* module optimizermodule */

        module reclosermodule {
            struct RecloserControlProfile : OpenFMB_Information_Model::openfmb::commonmodule::Container {
                OpenFMB_Information_Model::openfmb::commonmodule::Recloser  recloser;
                OpenFMB_Information_Model::openfmb::commonmodule::RecloserControl  recloserControl;
            };  //@top-level TRUE

            struct RecloserEventProfile : OpenFMB_Information_Model::openfmb::commonmodule::Container {
                OpenFMB_Information_Model::openfmb::commonmodule::Recloser  recloser;
                OpenFMB_Information_Model::openfmb::commonmodule::RecloserEvent  recloserEvent;
            };  //@top-level TRUE

            struct RecloserReadingProfile : OpenFMB_Information_Model::openfmb::commonmodule::Container {
                OpenFMB_Information_Model::openfmb::commonmodule::Recloser  recloser;
                OpenFMB_Information_Model::openfmb::commonmodule::RecloserReadingList  recloserReadingList;
            };  //@top-level TRUE

        }; /* module reclosermodule */

        module regulatormodule {
            struct RegulatorControlScheduleProfile : OpenFMB_Information_Model::openfmb::commonmodule::Container {
                OpenFMB_Information_Model::openfmb::commonmodule::RegulatorControlScheduleList  regulatorControlScheduleList;
                OpenFMB_Information_Model::openfmb::commonmodule::RegulatorSystem  regulatorSystem;
            };  //@top-level TRUE

            struct RegulatorEventProfile : OpenFMB_Information_Model::openfmb::commonmodule::Container {
                OpenFMB_Information_Model::openfmb::commonmodule::RegulatorEvent  regulatorEvent;
                OpenFMB_Information_Model::openfmb::commonmodule::RegulatorSystem  regulatorSystem;
            };  //@top-level TRUE

            struct RegulatorReadingProfile : OpenFMB_Information_Model::openfmb::commonmodule::Container {
                OpenFMB_Information_Model::openfmb::commonmodule::RegulatorSystem  regulatorSystem;
                OpenFMB_Information_Model::openfmb::commonmodule::RegulatorReadingList  regulatorReadingList;
            };  //@top-level TRUE

        }; /* module regulatormodule */

        module shuntmodule {
            struct ShuntControlScheduleProfile : OpenFMB_Information_Model::openfmb::commonmodule::Container {
                OpenFMB_Information_Model::openfmb::commonmodule::ShuntControlScheduleList  shuntControlScheduleList;
                OpenFMB_Information_Model::openfmb::commonmodule::ShuntSystem  shuntSystem;
            };  //@top-level TRUE

            struct ShuntControlProfile : OpenFMB_Information_Model::openfmb::commonmodule::Container {
                OpenFMB_Information_Model::openfmb::commonmodule::ShuntSystem  shuntSystem;
                OpenFMB_Information_Model::openfmb::commonmodule::ShuntControl  shuntControl;
            };  //@top-level TRUE

            struct ShuntReadingProfile : OpenFMB_Information_Model::openfmb::commonmodule::Container {
                OpenFMB_Information_Model::openfmb::commonmodule::ShuntSystem  shuntSystem;
                OpenFMB_Information_Model::openfmb::commonmodule::ShuntReadingList  shuntReadingList;
            };  //@top-level TRUE

        }; /* module shuntmodule */

        module solarmodule {
            struct SolarControlScheduleProfile : OpenFMB_Information_Model::openfmb::commonmodule::Container {
                OpenFMB_Information_Model::openfmb::commonmodule::SolarInverter  solarInverter;
                OpenFMB_Information_Model::openfmb::commonmodule::SolarControlScheduleList  solarControlScheduleList;
            };  //@top-level TRUE

            struct SolarCapabilityProfile : OpenFMB_Information_Model::openfmb::commonmodule::Container {
                OpenFMB_Information_Model::openfmb::commonmodule::SolarCapability  solarCapability;
                OpenFMB_Information_Model::openfmb::commonmodule::SolarInverter  solarInverter;
            };  //@top-level TRUE

            struct SolarControlProfile : OpenFMB_Information_Model::openfmb::commonmodule::Container {
                OpenFMB_Information_Model::openfmb::commonmodule::SolarInverter  solarInverter;
                OpenFMB_Information_Model::openfmb::commonmodule::SolarControl  solarControl;
            };  //@top-level TRUE

            struct SolarForecastProfile : OpenFMB_Information_Model::openfmb::commonmodule::Container {
                OpenFMB_Information_Model::openfmb::commonmodule::SolarInverter  solarInverter;
                OpenFMB_Information_Model::openfmb::commonmodule::ForecastSchedule  forecastSchedule;
            };  //@top-level TRUE

            struct SolarEventProfile : OpenFMB_Information_Model::openfmb::commonmodule::Container {
                OpenFMB_Information_Model::openfmb::commonmodule::SolarInverter  solarInverter;
                OpenFMB_Information_Model::openfmb::commonmodule::SolarInverterEvent  solarInverterEvent;
            };  //@top-level TRUE

            struct SolarReadingProfile : OpenFMB_Information_Model::openfmb::commonmodule::Container {
                OpenFMB_Information_Model::openfmb::commonmodule::SolarInverter  solarInverter;
                OpenFMB_Information_Model::openfmb::commonmodule::SolarReadingList  solarReadingList;
            };  //@top-level TRUE

        }; /* module solarmodule */

    }; /* module openfmb */

}; /* module OpenFMB_Information_Model */

module OpenFMB_Information_Model {
    module openfmb {
        module commonmodule {
            struct Analog {
                string mRID;  //@Optional
                string description;  //@Optional
                string measurementType;  //@Optional
                OpenFMB_Information_Model::openfmb::commonmodule::UnitMultiplierKind multiplier;  //@Optional
                string name;  //@Optional
                OpenFMB_Information_Model::openfmb::commonmodule::PhaseCodeKind phases;  //@Optional
                OpenFMB_Information_Model::openfmb::commonmodule::UnitSymbolKind unit;  //@Optional
                OpenFMB_Information_Model::openfmb::commonmodule::AnalogValue  analogMeasurementValue;
            };  //@top-level FALSE

            struct AnalogMeasurementList {
                sequence<OpenFMB_Information_Model::openfmb::commonmodule::Analog>  analogMeasurement;
            };  //@top-level FALSE

            struct BooleanMeasurement {
                string mRID;  //@Optional
                string description;  //@Optional
                string measurementType;  //@Optional
                string name;  //@Optional
                OpenFMB_Information_Model::openfmb::commonmodule::PhaseCodeKind phases;  //@Optional
                OpenFMB_Information_Model::openfmb::commonmodule::BooleanMeasurementValue  booleanMeasurementValue;
            };  //@top-level FALSE

            struct BooleanMeasurementList {
                sequence<OpenFMB_Information_Model::openfmb::commonmodule::BooleanMeasurement>  booleanMeasurement;
            };  //@top-level FALSE

            struct Breaker : OpenFMB_Information_Model::openfmb::commonmodule::IdentifiedObject {
                octet __dummy_prevent_empty_class_Breaker;
            };  //@top-level FALSE

            struct Discrete {
                string mRID;  //@Optional
                string description;  //@Optional
                string measurementType;  //@Optional
                OpenFMB_Information_Model::openfmb::commonmodule::UnitMultiplierKind multiplier;  //@Optional
                string name;  //@Optional
                OpenFMB_Information_Model::openfmb::commonmodule::PhaseCodeKind phases;  //@Optional
                OpenFMB_Information_Model::openfmb::commonmodule::UnitSymbolKind unit;  //@Optional
                OpenFMB_Information_Model::openfmb::commonmodule::DiscreteValue  discreteMeasurementValue;
            };  //@top-level FALSE

            struct DiscreteMeasurementList {
                sequence<OpenFMB_Information_Model::openfmb::commonmodule::Discrete>  discreteMeasurement;
            };  //@top-level FALSE

            struct EnergyConsumer : OpenFMB_Information_Model::openfmb::commonmodule::IdentifiedObject {
                string operatingLimit;  //@Optional
            };  //@top-level FALSE

            struct ESS : OpenFMB_Information_Model::openfmb::commonmodule::IdentifiedObject {
                octet __dummy_prevent_empty_class_ESS;
            };  //@top-level FALSE

            struct Event : OpenFMB_Information_Model::openfmb::commonmodule::IdentifiedObject {
                UML_Extension::dateTime timestamp;  //@Optional
                string type;
                string value;  //@Optional
                string typeExtension;  //@Optional
            };  //@top-level FALSE

            struct GeneratingUnit : OpenFMB_Information_Model::openfmb::commonmodule::IdentifiedObject {
                OpenFMB_Information_Model::openfmb::commonmodule::ActivePower maxOperatingP;  //@Optional
            };  //@top-level FALSE

            struct Market : OpenFMB_Information_Model::openfmb::commonmodule::IdentifiedObject {
                UML_Extension::dateTime actualEnd;  //@Optional
                UML_Extension::dateTime actualStart;  //@Optional
                boolean dst;  //@Optional
                UML_Extension::dateTime end;  //@Optional
                string localTimeZone;  //@Optional
                UML_Extension::dateTime start;  //@Optional
                string status;  //@Optional
                float timeIntervalLength;  //@Optional
                UML_Extension::dateTime tradingDay;  //@Optional
                string tradingPeriod;  //@Optional
                OpenFMB_Information_Model::openfmb::commonmodule::MarketFactorList  marketFactorList; //@Optional
                OpenFMB_Information_Model::openfmb::commonmodule::MarketRunList  marketRunList; //@Optional
            };  //@top-level FALSE

            struct Meter : OpenFMB_Information_Model::openfmb::commonmodule::IdentifiedObject {
                OpenFMB_Information_Model::openfmb::commonmodule::PowerSystemResource  powerSystemResource; //@Optional
            };  //@top-level FALSE

            struct OptimizedMicroGridMarket : OpenFMB_Information_Model::openfmb::commonmodule::Market {
                octet __dummy_prevent_empty_class_OptimizedMicroGridMarket;
            };  //@top-level FALSE

            struct SecurityEvent : OpenFMB_Information_Model::openfmb::commonmodule::Event {
                string log;  //@Optional
                string severity;  //@Optional
            };  //@top-level FALSE

            struct Status {
                string description;  //@Optional
                OpenFMB_Information_Model::openfmb::commonmodule::DiscreteMeasurementList  discreteMeasurementList; //@Optional
                OpenFMB_Information_Model::openfmb::commonmodule::BooleanMeasurementList  booleanMeasurementList; //@Optional
                OpenFMB_Information_Model::openfmb::commonmodule::StringMeasurementList  stringMeasurementList; //@Optional
                OpenFMB_Information_Model::openfmb::commonmodule::AnalogMeasurementList  analogMeasurementList; //@Optional
            };  //@top-level FALSE

            struct WeatherData {
                string interval;  //@Optional
                string source;  //@Optional
                string version;  //@Optional
                UML_Extension::dateTime versionDateTime;  //@Optional
                OpenFMB_Information_Model::openfmb::commonmodule::Temperature  temperature; //@Optional
                OpenFMB_Information_Model::openfmb::commonmodule::Wind  wind; //@Optional
                OpenFMB_Information_Model::openfmb::commonmodule::Humidity  humidity; //@Optional
                OpenFMB_Information_Model::openfmb::commonmodule::SunRadiation  sunRadiation; //@Optional
            };  //@top-level FALSE

        }; /* module commonmodule */

        module essmodule {
            struct ESSControlProfile : OpenFMB_Information_Model::openfmb::commonmodule::Container {
                OpenFMB_Information_Model::openfmb::commonmodule::ESSControl  essControl;
                OpenFMB_Information_Model::openfmb::commonmodule::ESS  ess;
            };  //@top-level TRUE

            struct ESSControlScheduleProfile : OpenFMB_Information_Model::openfmb::commonmodule::Container {
                OpenFMB_Information_Model::openfmb::commonmodule::ESS  ess;
                OpenFMB_Information_Model::openfmb::commonmodule::ESSControlScheduleList  essControlScheduleList;
            };  //@top-level TRUE

            struct ESSEventProfile : OpenFMB_Information_Model::openfmb::commonmodule::Container {
                OpenFMB_Information_Model::openfmb::commonmodule::ESSEvent  essEvent;
                OpenFMB_Information_Model::openfmb::commonmodule::ESS  ess;
            };  //@top-level TRUE

            struct ESSReadingProfile : OpenFMB_Information_Model::openfmb::commonmodule::Container {
                OpenFMB_Information_Model::openfmb::commonmodule::ESSReadingList  essReadingList;
                OpenFMB_Information_Model::openfmb::commonmodule::ESS  ess;
            };  //@top-level TRUE

        }; /* module essmodule */

        module generationmodule {
            struct GenerationControlScheduleProfile : OpenFMB_Information_Model::openfmb::commonmodule::Container {
                OpenFMB_Information_Model::openfmb::commonmodule::GeneratingUnit  generatingUnit;
                OpenFMB_Information_Model::openfmb::commonmodule::GenerationControlScheduleList  generationControlScheduleList;
            };  //@top-level TRUE

            struct GenerationControlProfile : OpenFMB_Information_Model::openfmb::commonmodule::Container {
                OpenFMB_Information_Model::openfmb::commonmodule::GeneratingUnit  generatingUnit;
                OpenFMB_Information_Model::openfmb::commonmodule::GenerationControl  generationControl;
            };  //@top-level TRUE

            struct GenerationForecastProfile : OpenFMB_Information_Model::openfmb::commonmodule::Container {
                OpenFMB_Information_Model::openfmb::commonmodule::GeneratingUnit  generatingUnit;
                OpenFMB_Information_Model::openfmb::commonmodule::ForecastSchedule  forecastSchedule;
            };  //@top-level TRUE

            struct GenerationReadingProfile : OpenFMB_Information_Model::openfmb::commonmodule::Container {
                OpenFMB_Information_Model::openfmb::commonmodule::GenerationReadingList  generationReadingList;
                OpenFMB_Information_Model::openfmb::commonmodule::GeneratingUnit  generatingUnit;
            };  //@top-level TRUE

            struct GenerationEventProfile : OpenFMB_Information_Model::openfmb::commonmodule::Container {
                OpenFMB_Information_Model::openfmb::commonmodule::GeneratingUnit  generatingUnit;
                OpenFMB_Information_Model::openfmb::commonmodule::GenerationEvent  generationEvent;
            };  //@top-level TRUE

        }; /* module generationmodule */

        module loadmodule {
            struct LoadControlScheduleProfile : OpenFMB_Information_Model::openfmb::commonmodule::Container {
                OpenFMB_Information_Model::openfmb::commonmodule::EnergyConsumer  energyConsumer;
                OpenFMB_Information_Model::openfmb::commonmodule::LoadControlScheduleList  loadControlScheduleList;
            };  //@top-level TRUE

            struct LoadControlProfile : OpenFMB_Information_Model::openfmb::commonmodule::Container {
                OpenFMB_Information_Model::openfmb::commonmodule::EnergyConsumer  energyConsumer;
                OpenFMB_Information_Model::openfmb::commonmodule::LoadControl  loadControl;
            };  //@top-level TRUE

            struct LoadForecastProfile : OpenFMB_Information_Model::openfmb::commonmodule::Container {
                OpenFMB_Information_Model::openfmb::commonmodule::EnergyConsumer  energyConsumer;
                OpenFMB_Information_Model::openfmb::commonmodule::ForecastSchedule  forecastSchedule;
            };  //@top-level TRUE

            struct LoadReadingProfile : OpenFMB_Information_Model::openfmb::commonmodule::Container {
                OpenFMB_Information_Model::openfmb::commonmodule::EnergyConsumer  energyConsumer;
                OpenFMB_Information_Model::openfmb::commonmodule::LoadReadingList  loadReadingList;
            };  //@top-level TRUE

        }; /* module loadmodule */

        module optimizermodule {
            struct ESSControlScheduleProfileList {
                sequence<OpenFMB_Information_Model::openfmb::essmodule::ESSControlScheduleProfile>  essControlScheduleProfile;
            };  //@top-level FALSE

            struct LoadControlScheduleProfileList {
                sequence<OpenFMB_Information_Model::openfmb::loadmodule::LoadControlScheduleProfile>  loadControlScheduleProfile;
            };  //@top-level FALSE

            struct RegulatorControlScheduleProfileList {
                sequence<OpenFMB_Information_Model::openfmb::regulatormodule::RegulatorControlScheduleProfile>  regulatorControlScheduleProfile;
            };  //@top-level FALSE

            struct SolarControlScheduleProfileList {
                sequence<OpenFMB_Information_Model::openfmb::solarmodule::SolarControlScheduleProfile>  solarControlScheduleProfile;
            };  //@top-level FALSE

            struct RequestedOptimizerScheduleProfile : OpenFMB_Information_Model::openfmb::commonmodule::Container {
                OpenFMB_Information_Model::openfmb::optimizermodule::RegulatorControlScheduleProfileList  regulatorControlScheduleProfileList; //@Optional
                OpenFMB_Information_Model::openfmb::optimizermodule::SolarControlScheduleProfileList  solarControlScheduleProfileList; //@Optional
                OpenFMB_Information_Model::openfmb::optimizermodule::LoadControlScheduleProfileList  loadControlScheduleProfileList; //@Optional
                OpenFMB_Information_Model::openfmb::optimizermodule::RequestedInterconnectionScheduleProfileList  requestedInterconnectionScheduleProfileList; //@Optional
                OpenFMB_Information_Model::openfmb::optimizermodule::ESSControlScheduleProfileList  essControlScheduleProfileList; //@Optional
            };  //@top-level TRUE

        }; /* module optimizermodule */

        module resourcemodule {
            struct ResourceReadingProfile : OpenFMB_Information_Model::openfmb::commonmodule::Container {
                OpenFMB_Information_Model::openfmb::commonmodule::Meter  meter;
                OpenFMB_Information_Model::openfmb::commonmodule::ResourceReadingList  resourceReadingList;
            };  //@top-level TRUE

        }; /* module resourcemodule */

        module securitymodule {
            struct SecurityEventProfile : OpenFMB_Information_Model::openfmb::commonmodule::Container {
                OpenFMB_Information_Model::openfmb::commonmodule::SecurityEvent  securityEvent;
            };  //@top-level TRUE

        }; /* module securitymodule */

        module weathermodule {
            struct WeatherDataProfile : OpenFMB_Information_Model::openfmb::commonmodule::Container {
                OpenFMB_Information_Model::openfmb::commonmodule::WeatherData  weatherData;
            };  //@top-level TRUE

        }; /* module weathermodule */

    }; /* module openfmb */

}; /* module OpenFMB_Information_Model */

module OpenFMB_Information_Model {
    module openfmb {
        module breakermodule {
            struct BreakerEventProfile : OpenFMB_Information_Model::openfmb::commonmodule::Container {
                OpenFMB_Information_Model::openfmb::commonmodule::BreakerEvent  breakerEvent;
                OpenFMB_Information_Model::openfmb::commonmodule::Breaker  breaker;
            };  //@top-level TRUE

            struct BreakerReadingProfile : OpenFMB_Information_Model::openfmb::commonmodule::Container {
                OpenFMB_Information_Model::openfmb::commonmodule::BreakerReadingList  breakerReadingList;
                OpenFMB_Information_Model::openfmb::commonmodule::Breaker  breaker;
            };  //@top-level TRUE

        }; /* module breakermodule */

        module commonmodule {
            struct BreakerStatus : OpenFMB_Information_Model::openfmb::commonmodule::Status {
                octet __dummy_prevent_empty_class_BreakerStatus;
            };  //@top-level FALSE

            struct ESSStatus : OpenFMB_Information_Model::openfmb::commonmodule::Status {
                octet __dummy_prevent_empty_class_ESSStatus;
            };  //@top-level FALSE

            struct GenerationStatus : OpenFMB_Information_Model::openfmb::commonmodule::Status {
                octet __dummy_prevent_empty_class_GenerationStatus;
            };  //@top-level FALSE

            struct InterchangeSchedule : OpenFMB_Information_Model::openfmb::commonmodule::Curve {
                OpenFMB_Information_Model::openfmb::commonmodule::InterTieDirectionKind directionType;  //@Optional
                OpenFMB_Information_Model::openfmb::commonmodule::MarketProductKind energyType;  //@Optional
                long intervalLength;  //@Optional
                OpenFMB_Information_Model::openfmb::commonmodule::EnergyProductKind scheduleType;  //@Optional
                string scheduleTypeExtension;  //@Optional
                string directionTypeExtension;  //@Optional
                string energyTypeExtension;  //@Optional
                OpenFMB_Information_Model::openfmb::commonmodule::OptimizedMicroGridMarket  optimizedMicroGridMarket; //@Optional
            };  //@top-level FALSE

            struct InterchangeScheduleList {
                sequence<OpenFMB_Information_Model::openfmb::commonmodule::InterchangeSchedule>  interchangeSchedule;
            };  //@top-level FALSE

            struct LoadStatus : OpenFMB_Information_Model::openfmb::commonmodule::Status {
                octet __dummy_prevent_empty_class_LoadStatus;
            };  //@top-level FALSE

            struct MotorOperatedSwitchStatus : OpenFMB_Information_Model::openfmb::commonmodule::Status {
                octet __dummy_prevent_empty_class_MotorOperatedSwitchStatus;
            };  //@top-level FALSE

            struct RecloserStatus : OpenFMB_Information_Model::openfmb::commonmodule::Status {
                octet __dummy_prevent_empty_class_RecloserStatus;
            };  //@top-level FALSE

            struct RegulatorStatus : OpenFMB_Information_Model::openfmb::commonmodule::Status {
                octet __dummy_prevent_empty_class_RegulatorStatus;
            };  //@top-level FALSE

            struct ResourceStatus : OpenFMB_Information_Model::openfmb::commonmodule::Status {
                octet __dummy_prevent_empty_class_ResourceStatus;
            };  //@top-level FALSE

            struct ShuntStatus : OpenFMB_Information_Model::openfmb::commonmodule::Status {
                octet __dummy_prevent_empty_class_ShuntStatus;
            };  //@top-level FALSE

            struct SolarStatus : OpenFMB_Information_Model::openfmb::commonmodule::Status {
                octet __dummy_prevent_empty_class_SolarStatus;
            };  //@top-level FALSE

        }; /* module commonmodule */

        module essmodule {
            struct ESSStatusProfile : OpenFMB_Information_Model::openfmb::commonmodule::Container {
                OpenFMB_Information_Model::openfmb::commonmodule::ESS  ess;
                OpenFMB_Information_Model::openfmb::commonmodule::ESSStatus  essStatus;
            };  //@top-level TRUE

        }; /* module essmodule */

        module generationmodule {
            struct GenerationStatusProfile : OpenFMB_Information_Model::openfmb::commonmodule::Container {
                OpenFMB_Information_Model::openfmb::commonmodule::GeneratingUnit  generatingUnit;
                OpenFMB_Information_Model::openfmb::commonmodule::GenerationStatus  generationStatus;
            };  //@top-level TRUE

        }; /* module generationmodule */

        module interchangemodule {
            struct InterchangeScheduleProfile : OpenFMB_Information_Model::openfmb::commonmodule::Container {
                OpenFMB_Information_Model::openfmb::commonmodule::InterchangeScheduleList  interchangeScheduleList;
                OpenFMB_Information_Model::openfmb::commonmodule::PowerSystemResource  powerSystemResource;
            };  //@top-level TRUE

        }; /* module interchangemodule */

        module loadmodule {
            struct LoadStatusProfile : OpenFMB_Information_Model::openfmb::commonmodule::Container {
                OpenFMB_Information_Model::openfmb::commonmodule::EnergyConsumer  energyConsumer;
                OpenFMB_Information_Model::openfmb::commonmodule::LoadStatus  loadStatus;
            };  //@top-level TRUE

        }; /* module loadmodule */

        module motoroperatedswitchmodule {
            struct MotorOperatedSwitchStatusProfile : OpenFMB_Information_Model::openfmb::commonmodule::Container {
                OpenFMB_Information_Model::openfmb::commonmodule::MotorOperatedSwitch  motorOperatedSwitch;
                OpenFMB_Information_Model::openfmb::commonmodule::MotorOperatedSwitchStatus  motorOperatedSwitchStatus;
            };  //@top-level TRUE

        }; /* module motoroperatedswitchmodule */

        module optimizermodule {
            struct PlannedOptimizerScheduleProfile : OpenFMB_Information_Model::openfmb::commonmodule::Container {
                OpenFMB_Information_Model::openfmb::optimizermodule::RegulatorControlScheduleProfileList  regulatorControlScheduleProfileList; //@Optional
                OpenFMB_Information_Model::openfmb::optimizermodule::SolarControlScheduleProfileList  solarControlScheduleProfileList; //@Optional
                OpenFMB_Information_Model::openfmb::optimizermodule::PlannedInterconnectionScheduleProfileList  plannedInterconnectionScheduleProfileList; //@Optional
                OpenFMB_Information_Model::openfmb::optimizermodule::LoadControlScheduleProfileList  loadControlScheduleProfileList; //@Optional
                OpenFMB_Information_Model::openfmb::optimizermodule::ESSControlScheduleProfileList  essControlScheduleProfileList; //@Optional
            };  //@top-level TRUE

        }; /* module optimizermodule */

        module reclosermodule {
            struct RecloserStatusProfile : OpenFMB_Information_Model::openfmb::commonmodule::Container {
                OpenFMB_Information_Model::openfmb::commonmodule::Recloser  recloser;
                OpenFMB_Information_Model::openfmb::commonmodule::RecloserStatus  recloserStatus;
            };  //@top-level TRUE

        }; /* module reclosermodule */

        module regulatormodule {
            struct RegulatorStatusProfile : OpenFMB_Information_Model::openfmb::commonmodule::Container {
                OpenFMB_Information_Model::openfmb::commonmodule::RegulatorSystem  regulatorSystem;
                OpenFMB_Information_Model::openfmb::commonmodule::RegulatorStatus  regulatorStatus;
            };  //@top-level TRUE

        }; /* module regulatormodule */

        module resourcemodule {
            struct ResourceStatusProfile : OpenFMB_Information_Model::openfmb::commonmodule::Container {
                OpenFMB_Information_Model::openfmb::commonmodule::ResourceStatus  resourceStatus;
                OpenFMB_Information_Model::openfmb::commonmodule::PowerSystemResource  powerSystemResource;
            };  //@top-level TRUE

        }; /* module resourcemodule */

        module shuntmodule {
            struct ShuntStatusProfile : OpenFMB_Information_Model::openfmb::commonmodule::Container {
                OpenFMB_Information_Model::openfmb::commonmodule::ShuntStatus  shuntStatus;
                OpenFMB_Information_Model::openfmb::commonmodule::ShuntSystem  shuntSystem;
            };  //@top-level TRUE

        }; /* module shuntmodule */

        module solarmodule {
            struct SolarStatusProfile : OpenFMB_Information_Model::openfmb::commonmodule::Container {
                OpenFMB_Information_Model::openfmb::commonmodule::SolarInverter  solarInverter;
                OpenFMB_Information_Model::openfmb::commonmodule::SolarStatus  solarStatus;
            };  //@top-level TRUE

        }; /* module solarmodule */

    }; /* module openfmb */

}; /* module OpenFMB_Information_Model */

module OpenFMB_Information_Model {
    module openfmb {
        module breakermodule {
            struct BreakerStatusProfile : OpenFMB_Information_Model::openfmb::commonmodule::Container {
                OpenFMB_Information_Model::openfmb::commonmodule::BreakerStatus  breakerStatus;
                OpenFMB_Information_Model::openfmb::commonmodule::Breaker  breaker;
            };  //@top-level TRUE

        }; /* module breakermodule */

    }; /* module openfmb */

}; /* module OpenFMB_Information_Model */

